from itertools import product
import string

import numpy

CORE_COMBO = (['O', 'S', 'N', 'P', 'C'], ['N', 'P', 'C'])
SCORES = [''.join(x) for x in product(['E', 'Z'], *CORE_COMBO)]
DCORES = [''.join(x) for x in product(['C', 'T'], *CORE_COMBO)]
CORES = SCORES + DCORES
XGROUPS = list(string.uppercase[:12])
RGROUPS = list(string.lowercase[:12])
ARYL0 = ['2', '3', '8', '9']
ARYL2 = ['4', '5', '6', '7']
ARYL = ARYL0 + ARYL2
ALL = CORES + XGROUPS + RGROUPS + ARYL
NEEDSPACE = XGROUPS + ARYL0

CLUSTERS = {
    'b': "Blacklight",
    't': "Trestles",
    'g': "Gordon",
    'c': "Carver",
    'h': "Hooper",
    'm': "Marcy",
}
CLUSTER_TUPLES = [(x, CLUSTERS[x]) for x in CLUSTERS.keys()]

KEYWORDS = "opt B3LYP/6-31g(d)"

COLORS = {
    '1': (255, 255, 255),
    'Ar': (255, 0, 0),
    '2': (0, 255, 0),
    '3': (0, 0, 255),
    'S': (255, 255, 0),
    'O': (255, 0, 0),
    'N': (0, 0, 255),
    'P': (255, 128, 0),
    'Cl': (0, 255, 0),
    'Br': (180, 0, 0),
    'C': (128, 128, 128),
    'H': (220, 220, 220),
    'Si': (128, 170, 128),
}

SLOPE = .9
WL = numpy.matrix(
        [
        -2.27029423e-02, -1.94743213e-01, -1.97768404e-01,  3.18052261e-01,
        -3.36623880e-01,  5.20896633e-03, -2.10752081e-01, -3.76002442e-01,
         1.80880253e-01, -2.66479414e-01, -2.80188085e-01, -6.76891459e-01,
        -3.84013804e-02,  5.33337249e-02, -7.85216661e-02, -1.21579645e-01,
         5.88462145e-02,  1.87489378e-01,  1.25760922e-01,  6.38476352e-02,
        -5.90769063e-01, -8.11476377e-02,  5.65071708e-01,  3.28978938e-01,
         7.57575241e-01,  5.60030339e-12, -7.21304252e-12,  1.56174007e-11,
         8.15331234e-12,  9.48467837e-02, -6.50143601e-01, -3.07992378e-02,
        -3.86072275e-02, -1.08518784e-01, -3.05382474e-02,  9.19800667e-02,
         3.69734116e-02,  1.68886036e-01,  4.72846212e-01,  2.97609633e-13,
        -1.65037572e-13,  1.76155747e-13,  9.48467837e-02,  6.48240150e-01,
        -7.21907761e-02, -5.87436515e-02, -2.11105487e+00, -2.42040419e-02,
         2.16235220e-02, -5.48063245e-04,  2.39106524e-01,  1.26984983e+00,
         2.20833758e-13,  1.11934040e-13, -5.78811549e-13, -3.01374543e-03,
        -2.22874868e-01, -9.53509664e-01,  3.56310021e-01, -4.54266203e-02,
        -2.44458155e-01, -3.51845759e-01, -1.29085585e-01,  1.83405977e-01,
         1.22001792e-01, -5.14213150e-02, -1.22278526e+00, -2.55284509e-01,
         6.88984526e-01,  3.21800915e-01,  8.65612074e-01, -2.41067068e-13,
         5.17644366e-14, -8.43799387e-14,  5.92243205e-14, -1.70774057e-01,
        -7.16897804e-02, -5.30841088e-02, -8.93954495e-03, -4.23604945e-01,
        -4.22764849e-01,  1.75224229e-01,  2.16653825e-02, -2.18551048e-02,
         3.42326018e-02,  8.59445491e-18, -1.55336164e-17, -9.02494716e-18,
        -1.70774057e-01, -1.16133642e-02, -1.26419923e-01, -1.81433922e-01,
        -4.25993586e-01,  2.83246828e-02, -3.36424597e-02, -1.92872188e-01,
         1.26069116e-01,  4.67655259e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -1.45744224e-01, -3.43793163e-01, -8.42014300e-01,
         4.13907546e-02,  1.64202685e-02, -4.42094207e-02, -1.35910505e-01,
         4.31131921e-02,  2.22508976e-01,  1.25760922e-01,  6.38476352e-02,
        -5.90769063e-01, -8.11476377e-02,  5.65071708e-01,  3.28978938e-01,
         7.57575241e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.01665787e-01,  6.32069757e-01, -3.07992378e-02,
        -3.86072275e-02, -2.35132802e-01, -3.05382474e-02,  9.19800667e-02,
         3.69734116e-02, -1.30965959e-01, -4.15566227e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.01665787e-01, -5.53215183e-01,
        -7.21907761e-02, -5.87436515e-02,  1.75048160e+00, -2.42040419e-02,
         2.16235220e-02, -5.48063244e-04, -6.07454717e-02, -1.12304440e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -5.84317164e-02,
        -2.10365017e-01, -4.05874270e-01, -4.05874270e-01, -4.05874270e-01,
        -4.05874270e-01,
         ]).T

WH = numpy.matrix(
        [
         2.19291628e-02, -3.17743002e-01, -2.88134906e-01,  2.14962398e-02,
        -4.26162737e-01, -2.71903253e-01, -5.50699850e-01, -4.36197780e-01,
        -2.95550029e-01,  9.75683076e-02, -3.51485706e-02, -1.65308645e-01,
         2.92528169e-01, -3.07227233e-02,  9.11489407e-02, -8.78758314e-02,
         6.40068752e-02, -3.19617722e-02, -1.82470599e-01, -7.67913103e-02,
        -4.55104818e-01, -2.94235716e-02,  1.08963322e-01,  5.39793200e-02,
         3.87131694e-01, -2.29530650e-12,  3.27114740e-12, -3.00653861e-12,
        -4.57104947e-12, -3.60384742e-02,  1.79769313e-01, -2.85211132e-02,
        -1.92502659e-02,  1.67125242e-01,  4.03752206e-02,  1.72051178e-01,
         4.42165433e-02, -1.43042004e-01, -3.76166853e-01, -1.52205902e-13,
         8.33938888e-14, -1.44769286e-13, -3.60384742e-02, -1.41772010e-01,
        -1.48398341e-02, -1.30823522e-02,  5.23556982e-01,  2.27180560e-02,
         9.21706487e-02,  7.72305408e-03, -1.45929435e-01, -2.93987849e-01,
        -6.32495708e-14, -4.21222993e-14,  3.27105457e-13,  2.94760581e-01,
         3.73840192e-03, -3.59465153e-01,  7.99094595e-01, -3.36579224e-02,
         1.74154450e-01, -1.86192424e-01,  2.03683493e-01, -3.52799069e-02,
        -5.66522974e-01, -2.89652664e-01, -1.19781529e+00, -1.51945749e-01,
         2.96361800e-01,  1.88230564e-01,  9.80935352e-01,  7.84995376e-14,
        -4.06199802e-14,  3.61689755e-14,  1.53739831e-15, -3.75604381e-02,
         2.37356735e-02, -1.55569136e-01, -1.71619037e-01, -2.00359867e-01,
         3.45589131e-01,  1.33350123e-01,  6.92305450e-03,  2.97859426e-01,
        -1.21921772e-01, -1.52419532e-16, -1.11811496e-16, -2.23790336e-17,
        -3.75604381e-02,  1.92148981e-01, -1.66089468e-01, -1.11673588e-01,
        -4.23740954e-01, -1.23196366e-01,  1.10631279e-01,  5.91581646e-02,
         4.57449767e-01,  1.63299779e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  9.41586944e-02, -9.80593484e-02, -3.68245191e-01,
         4.73779708e-01,  9.63741202e-02,  1.76078654e-01, -3.74249864e-02,
         2.60157246e-01,  1.43591223e-01, -1.82470599e-01, -7.67913103e-02,
        -4.55104818e-01, -2.94235716e-02,  1.08963322e-01,  5.39793200e-02,
         3.87131694e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  5.15091232e-02, -1.55776772e-01, -2.85211132e-02,
        -1.92502659e-02, -3.43804048e-01,  4.03752206e-02,  1.72051178e-01,
         4.42165433e-02,  4.03050667e-01,  3.82843625e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  5.15091232e-02,  2.72227880e-01,
        -1.48398341e-02, -1.30823522e-02, -7.62314327e-01,  2.27180560e-02,
         9.21706487e-02,  7.72305408e-03,  4.00163237e-01,  4.90418671e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  9.25406428e-02,
         3.57187260e-03, -1.28244766e+00, -1.28244766e+00, -1.28244766e+00,
        -1.28244766e+00,
         ]).T

WG = numpy.matrix(
        [
        -1.74003147e-02,  1.52298438e-01,  1.03526648e-01,  3.29794762e-01,
        -3.03190612e-02,  2.14568456e-01,  2.97240649e-01,  4.06768312e-02,
         4.31951762e-01, -3.09035033e-01, -2.37643207e-01, -6.59439550e-01,
        -3.17640134e-01, -1.94033724e-01, -4.09418606e-01, -2.95431192e-01,
        -3.16264726e-01,  2.39796276e-01,  3.23264699e-01,  1.18730662e-01,
        -1.14913874e-01, -1.61665514e-02,  4.50708449e-01,  2.86652199e-01,
         3.72795949e-01,  1.04712807e-11, -1.40535622e-11,  1.96103816e-11,
         1.81088602e-11,  1.37109883e-01, -4.96416792e-01,  3.69073300e-04,
        -2.07324443e-02, -6.99166001e-01, -5.98627508e-02, -7.21734449e-02,
        -4.19544772e-02,  1.40540976e-01,  3.42476128e-02,  6.05341506e-13,
        -3.44658169e-13,  4.87530410e-13,  1.37109883e-01,  7.52340493e-01,
        -5.44753711e-02, -4.16824443e-02, -3.29609922e+00, -4.82738619e-02,
        -5.76567782e-02, -3.79322549e-02,  2.13252087e-01,  1.35537911e+00,
         3.44474250e-13,  1.95757253e-13, -1.28530289e-12, -2.56521761e-01,
        -1.45086462e-01, -9.87179291e-01, -4.59465679e-01, -1.42547117e-02,
        -3.97046992e-01, -1.56622198e-01, -3.04265016e-01,  2.74075737e-01,
         6.32879664e-01,  2.86008158e-01,  1.07928119e-01,  1.01265619e-01,
         3.58528119e-01,  1.53403119e-01, -1.55170745e-01, -3.95072066e-13,
         1.40552213e-13, -1.60055755e-13,  4.65071378e-14, -8.93354023e-02,
        -5.70167540e-02,  1.35517176e-01,  1.88017483e-01, -3.06891241e-01,
        -9.12009399e-01,  3.44909800e-02,  1.22184493e-01, -3.24951328e-01,
         2.48469672e-01,  1.16337061e-16,  6.64655670e-17,  8.62233154e-18,
        -8.93354023e-02, -1.77997919e-01,  1.29443993e-02, -1.05891815e-01,
         7.01894620e-02,  2.23980962e-01, -1.59030540e-01, -2.77566918e-01,
        -3.15456384e-01, -1.43360164e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -2.65101586e-01, -1.55986899e-01, -7.02522570e-01,
        -3.41185363e-01,  1.77820068e-01,  2.53872338e-02,  1.37460331e-01,
         8.42006099e-02,  4.82886745e-02,  3.23264699e-01,  1.18730662e-01,
        -1.14913874e-01, -1.61665514e-02,  4.50708449e-01,  2.86652199e-01,
         3.72795949e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  4.56378692e-03,  4.60120812e-01,  3.69073311e-04,
        -2.07324443e-02,  5.34907957e-01, -5.98627508e-02, -7.21734449e-02,
        -4.19544772e-02, -3.56353568e-01, -1.94529157e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  4.56378694e-03, -8.03377812e-01,
        -5.44753711e-02, -4.16824443e-02,  3.18381585e+00, -4.82738619e-02,
        -5.76567782e-02, -3.79322549e-02, -2.83642457e-01, -1.43190663e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.64358816e-01,
        -1.77040082e-01,  7.69869242e-01,  7.69869242e-01,  7.69869242e-01,
         7.69869242e-01,
         ]).T


import cPickle
import os
folder, _ = os.path.split(__file__)
DATAPATH = os.path.join(folder, "data")

with open(os.path.join(DATAPATH, "feat1homo.pkl"), "rb") as f:
    HOMO_CLF = cPickle.load(f)
with open(os.path.join(DATAPATH, "feat1lumo.pkl"), "rb") as f:
    LUMO_CLF = cPickle.load(f)
with open(os.path.join(DATAPATH, "feat1gap.pkl"), "rb") as f:
    GAP_CLF = cPickle.load(f)

with open(os.path.join(DATAPATH, "decaypredhomo.pkl"), "rb") as f:
    PRED_HOMO_CLF = cPickle.load(f)
with open(os.path.join(DATAPATH, "decaypredlumo.pkl"), "rb") as f:
    PRED_LUMO_CLF = cPickle.load(f)
with open(os.path.join(DATAPATH, "decaypredgap.pkl"), "rb") as f:
    PRED_GAP_CLF = cPickle.load(f)
